#include "LoRa_Custom.h"

#define LORA_IMPLICIT_LENGTH 5
#define LORA_BYTE_MODE

struct motors{
    float TempMotor;
    float TempIGBT;
    float TempInverter;
    uint8_t status;
};

struct HV{
    float max_voltage;
    float min_voltage;
    float avg_voltage;
    float max_temp;
    float min_temp;
    float avg_temp;
};

struct LV{
    float min_voltage;
    float tot_voltage;
    float max_temp;
};

struct Temps{
    uint16_t precold;
    uint16_t postcold;
    uint16_t premot;
    uint16_t postmot;
};

struct Telemetry {
    struct motors motor_log[4];
    struct HV hv_log;
    struct LV lv_log;
    struct Temps temp_dx_log;
    struct Temps temp_sx_log;
};

int counter = 0;
int failed_packets = 0;

void setup()
{
  Serial.begin(115200);
  while (!Serial);

  if (!LoRa.begin(868e6)) {
    Serial.println("Starting LoRa failed!");
    while (1);
  }
  
  LoRa.setSignalBandwidth(250e3);
  LoRa.setSpreadingFactor(6);
  LoRa.setCodingRate4(4);
  LoRa.enableCrc();
}

void loop()
{
  Telemetry d;

  int packetSize = LoRa.parsePacket(LORA_IMPLICIT_LENGTH);
  if (packetSize) {
    //Serial.println("Packet received");
 
    #ifdef LORA_STRING_MODE
      String incoming = "";
      
      while (LoRa.available())
        incoming += (char)LoRa.read();
    #endif

    #ifdef LORA_BYTE_MODE
      uint8_t received_buffer[LORA_IMPLICIT_LENGTH];
      int i = 0;
      while(LoRa.available())
        received_buffer[i++] = (uint8_t)LoRa.read();
    
      parse_to_struct(received_buffer);
      //Serial.write((const char *)&logged_values.temp_dx_log, sizeof(logged_values.temp_dx_log) + 18); 
    
      #ifdef PRINT_DEBUG
        Serial.print("ID: ");
        Serial.println(received_buffer[0]);
        Serial.print("Value: ");
        Serial.println(uint32_to_float(buffer_to_uint32(received_buffer)));
        Serial.println("RSSI: " + String(LoRa.packetRssi()));
        Serial.println("SNR: " + String(LoRa.packetSnr()));
      #endif
    #endif
  }

  #ifndef PRINT_DEBUG
    if(counter % 10 == 0){
      //send_JSON();
      Serial.println(LoRa.failed_packets);
      //Serial.write((const char *)&logged_values.temp_dx_log, sizeof(logged_values.temp_dx_log) + 1024); 
      counter = 0;
    }
    counter++;
  #endif
    
  delay(5);
}
